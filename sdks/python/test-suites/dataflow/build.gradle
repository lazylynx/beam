/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: org.apache.beam.gradle.BeamModulePlugin
applyPythonNature()

dependencies {
  distTarBall project(path: ":sdks:python", configuration: "distTarBall")
}

def runScriptsDir = "${rootDir}/sdks/python/scripts"

/**
 * configure preCommitIT tasks
 */
def preCommitIT(String dataflowPythonVersion, String runScriptsDir, String envdir, Boolean streaming, Boolean runnerV2) {
  def suffix = runnerV2 ? '_V2' : ''
  suffix = streaming ? "_streaming$suffix" : "_batch$suffix"
  def versionSuffix = getVersionSuffix(dataflowPythonVersion)
  // for Python 2, there is no need to indicate suite Python version
  def suiteSuffix = versionSuffix == '2' ? '' : "-py${versionSuffix}"

  project.task("preCommitITPy${versionSuffix}${suffix}") {
    pythonVersion = dataflowPythonVersion

    dependsOn = ['installGcpTest',
                 ':sdks:python:sdist',
                 ':runners:google-cloud-dataflow-java:worker:shadowJar']

    def dataflowWorkerJar = project(":runners:google-cloud-dataflow-java:worker").shadowJar.archivePath

    doLast {
      // Basic integration tests to run in PreCommit
      def precommitTests = streaming ? [
          "apache_beam.examples.streaming_wordcount_it_test:StreamingWordCountIT.test_streaming_wordcount_it",
      ] : [
          "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
      ]
      def testOpts = [
          "--tests=${precommitTests.join(',')}",
          "--nocapture",    // Print stdout instantly
          "--processes=2",    // Number of tests running in parallel
          "--process-timeout=1800",   // Timeout of whole command execution
      ]

      def argMap = [
          "test_opts"   : testOpts,
          "sdk_location": files(configurations.distTarBall.files).singleFile,
          "worker_jar"  : dataflowWorkerJar,
          "suite"       : "preCommitIT-df${suiteSuffix}"
      ]

      if (runnerV2) {
        argMap.put("runner_v2", "true")
        // KMS is not supported for streaming engine.
        argMap.put("kms_key_name", "\"\"")
      }
      if (streaming) {
        argMap.put("streaming", "true")
      }

      def cmdArgs = mapToArgString(argMap)
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs"
      }
    }
  }
}

def preCommitITTaskNamePrefix = 'preCommitITPy'

getTaskRunningPythonVersions('dataflow_precommit_it_task_py_versions').each {
  preCommitIT(it, runScriptsDir, envdir, false, false)
  preCommitIT(it, runScriptsDir, envdir, true, false)
  preCommitIT(it, runScriptsDir, envdir, false, true)
  preCommitIT(it, runScriptsDir, envdir, true, true)

  def versionSuffix = getVersionSuffix(it)
  def taskName = preCommitITTaskNamePrefix + versionSuffix

  project.task(taskName) {
    dependsOn = ["preCommitITPy${versionSuffix}_batch",
                 "preCommitITPy${versionSuffix}_streaming"]
  }
  project.task("${taskName}_V2") {
    dependsOn = ["preCommitITPy${versionSuffix}_batch_V2",
                 "preCommitITPy${versionSuffix}_streaming_V2"]
  }
}

task preCommitIT {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(preCommitITTaskNamePrefix) &&
                            !task.name.endsWith('V2') }
  }
}

task preCommitIT_V2{
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(preCommitITTaskNamePrefix) &&
                            task.name.endsWith('V2') }
  }
}

// configure mongodbioIT tasks
def mongodbioITTaskNamePrefix = 'mongodbioITPy'

def addMongodbioITTask = { String taskNamePrefix, String mongodbioPythonVersion ->
  def versionSuffix = getVersionSuffix(mongodbioPythonVersion)

  project.task(taskNamePrefix + versionSuffix) {
    pythonVersion = mongodbioPythonVersion
    dependsOn = ['installGcpTest',
                 ':sdks:python:sdist']
    def opts = findProperty('opts')
    opts = String.format("%s %s", opts, "--sdk_location=${files(configurations.distTarBall.files).singleFile}")
    doLast {
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && python -m apache_beam.io.mongodbio_it_test ${opts}"
      }
    }
  }
}

getTaskRunningPythonVersions('dataflow_mongodbio_it_task_py_versions').each {
  addMongodbioITTask(mongodbioITTaskNamePrefix, it)
}

task mongodbioIT {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(mongodbioITTaskNamePrefix) }
  }
}

def mongodbioITLoadTestTaskNamePrefix = 'mongodbioITLoadTestPy'

getTaskRunningPythonVersions('dataflow_mongodbio_it_loadtest_task_py_versions').each {
  addMongodbioITTask(mongodbioITLoadTestTaskNamePrefix, it)
}

task mongodbioITLoadTest {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(mongodbioITLoadTestTaskNamePrefix) }
  }
}

// Chicago Taxi Example
def chicagoTaxiExampleTaskNamePrefix = 'chicagoTaxiExamplePy'

getTaskRunningPythonVersions('dataflow_chicago_taxi_example_task_py_versions').each {
  def versionSuffix = getVersionSuffix(it)
  def chicagoTaxiPythonVersion = it
  def installTaskName = "installChicagoTaxiExampleRequirementsPy${versionSuffix}"

  project.task(installTaskName) {
    pythonVersion = chicagoTaxiPythonVersion
    dependsOn 'installGcpTest'

    doLast {
      exec {
        workingDir "$rootProject.projectDir/sdks/python/apache_beam/testing/benchmarks/chicago_taxi/"
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && pip install -r requirements.txt"
      }
    }
  }

  project.task(chicagoTaxiExampleTaskNamePrefix + versionSuffix) {
    pythonVersion = chicagoTaxiPythonVersion
    dependsOn = [installTaskName,
                 ':sdks:python:sdist']
    def gcsRoot = findProperty('gcsRoot')
    def pipelineOptions = findProperty('pipelineOptions') ?: ""
    pipelineOptions += " --sdk_location=\"${files(configurations.distTarBall.files).singleFile}\""

    doLast {
      exec {
        workingDir "$rootProject.projectDir/sdks/python/apache_beam/testing/benchmarks/chicago_taxi/"
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ./run_chicago.sh ${gcsRoot} DataflowRunner ${pipelineOptions}"
      }
    }
  }
}

task chicagoTaxiExample {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(chicagoTaxiExampleTaskNamePrefix) }
  }
}
