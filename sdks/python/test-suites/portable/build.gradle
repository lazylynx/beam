/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins { id 'org.apache.beam.module' }
applyPythonNature()

def pythonRootDir = "${rootDir}/sdks/python"

def addCrossLanguagePythonJavaDirect = { version ->
  def taskName = "crossLanguagePythonJavaDirectPy${version.replace('.', '')}"
  project.task(taskName) {
    pythonVersion = version
    dependsOn = ['setupVirtualenv',
                 ':sdks:java:container:docker',
                 ':sdks:java:testing:expansion-service:buildTestExpansionServiceJar']
    doLast {
      def options = [
          "--expansion_service_target=sdks:java:testing:expansion-service:buildTestExpansionServiceJar",
          "--expansion_service_target_appendix=testExpansionService",
      ]
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test] && python -m apache_beam.transforms.external_java ${options.join(' ')}"
      }
    }
  }
}

def crossLanguagePythonJavaFlinkTaskNamePrefix = 'crossLanguagePythonJavaFlinkPy'

def addCrossLanguagePythonJavaFlinkTask = { version ->
  def versionSuffix = getVersionSuffix(version)
  def dockerPythonVersion = 'py' + versionSuffix
  def taskName = crossLanguagePythonJavaFlinkTaskNamePrefix + versionSuffix
  project.task(taskName) {
    pythonVersion = version
    dependsOn = ['setupVirtualenv',
                 ':runners:flink:1.10:job-server:shadowJar',
                 ":sdks:python:container:${dockerPythonVersion}:docker",
                 ':sdks:java:container:docker',
                 ':sdks:java:testing:expansion-service:buildTestExpansionServiceJar']
    doLast {
      def options = [
          "--expansion_service_target=sdks:java:testing:expansion-service:buildTestExpansionServiceJar",
          "--expansion_service_target_appendix=testExpansionService",
      ]
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test] && python -m apache_beam.transforms.external_java ${options.join(' ')}"
      }
    }
  }
}

def crossLanguagePortableWordCountFlinkTaskNamePrefix = 'crossLanguagePortableWordCountFlinkPy'

def addCrossLanguagePortableWordCountFlinkTask = { version ->
  def versionSuffix = getVersionSuffix(version)
  def dockerPythonVersion = 'py' + versionSuffix
  def taskName = crossLanguagePortableWordCountFlinkTaskNamePrefix + versionSuffix
  project.task(taskName) {
    pythonVersion = version
    dependsOn = ['setupVirtualenv',
                 ':runners:flink:1.10:job-server:shadowJar',
                 ":sdks:python:container:${dockerPythonVersion}:docker",
                 ':sdks:java:container:docker',
                 ':sdks:java:testing:expansion-service:buildTestExpansionServiceJar']
    doLast {
      def testServiceExpansionJar = project(":sdks:java:testing:expansion-service:").buildTestExpansionServiceJar.archivePath
      def options = [
          "--input=/etc/profile",
          "--output=/tmp/py-wordcount-portable",
          "--runner=FlinkRunner",
          "--parallelism=2",
          "--environment_cache_millis=10000",
          "--expansion_service_jar=${testServiceExpansionJar}",
          // Writes to local filesystem might fail for multiple SDK workers.
          "--sdk_worker_parallelism=1"]
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test] && python -m apache_beam.examples.wordcount_xlang ${options.join(' ')}"
        // TODO: Check that the output file is generated and runs.
      }
    }
  }
}

getListProperty('cross_language_task_py_versions').each {
  addCrossLanguagePythonJavaFlinkTask(it)
  addCrossLanguagePortableWordCountFlinkTask(it)
}

task crossLanguageTests {
  dependsOn {
    tasks.findAll {
      task -> task.name.startsWith(crossLanguagePythonJavaFlinkTaskNamePrefix) ||
        task.name.startsWith(crossLanguagePortableWordCountFlinkTaskNamePrefix)
    }
  }
}

def crossLanguagePythonJavaKafkaIOFlinkTaskNamePrefix = 'crossLanguagePythonJavaKafkaIOFlinkPy'

getListProperty('cross_language_pythonjavakafkaioflink_task_py_versions').each {
  def version = it
  def versionSuffix = getVersionSuffix(version)
  def taskName = crossLanguagePythonJavaKafkaIOFlinkTaskNamePrefix + versionSuffix
  project.task(taskName) {
    pythonVersion = version
    dependsOn = ['setupVirtualenv',
                 ':runners:flink:1.10:job-server:shadowJar',
                 ":sdks:python:container:py${versionSuffix}:docker",
                 ':sdks:java:container:docker',
                 ':sdks:java:io:expansion-service:shadowJar',
                 ':sdks:java:testing:kafka-service:buildTestKafkaServiceJar']

    doLast {
      def kafkaJar = project(":sdks:java:testing:kafka-service:").buildTestKafkaServiceJar.archivePath
      def options = [
          "--runner=FlinkRunner",
          "--parallelism=2",
          "--environment_type=DOCKER",
          "--environment_cache_millis=10000",
          "--experiment=beam_fn_api",
      ]
      exec {
        environment "LOCAL_KAFKA_JAR", kafkaJar
        executable 'sh'
        args '-c', """
            . ${envdir}/bin/activate \\
            && cd ${pythonRootDir} \\
            && pip install -e .[test] \\
            && python setup.py nosetests \\
                --tests apache_beam.io.external.xlang_kafkaio_it_test:CrossLanguageKafkaIOTest \\
                --test-pipeline-options='${options.join(' ')}'
            """
      }
    }
  }
}

task crossLanguagePythonJavaKafkaIOFlink {
  dependsOn {
    tasks.findAll {
      task -> task.name.startsWith(crossLanguagePythonJavaKafkaIOFlinkTaskNamePrefix)
    }
  }
}

def createProcessWorkerTaskNamePrefix = 'createProcessWorkerPy'
def sparkValidatesRunnerTaskNamePrefix = 'sparkValidatesRunnerPy'

getListProperty('spark_validates_runner_task_py_versions').each {
  def version = it
  def versionSuffix = getVersionSuffix(version)
  def createProcessWorkerTaskName = createProcessWorkerTaskNamePrefix + versionSuffix
  project.task(createProcessWorkerTaskName) {
    pythonVersion = version
    dependsOn = [':sdks:python:container:build',
                 'setupVirtualenv']
    def sdkWorkerFile = file("${buildDir}/sdk_worker.sh")
    def osType = Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux'
    def workerScript = "${project(":sdks:python:container:").buildDir.absolutePath}/target/launcher/${osType}_amd64/boot"
    def sdkWorkerFileCode = "sh -c \"pip=`which pip` . ${envdir}/bin/activate && ${workerScript} \$* \""
    outputs.file sdkWorkerFile
    doLast {
      sdkWorkerFile.write sdkWorkerFileCode
      exec {
        commandLine('sh', '-c', ". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test]")
      }
      exec {
        commandLine('chmod', '+x', sdkWorkerFile)
      }
    }
  }
  def sparkValidatesRunnerTaskName = sparkValidatesRunnerTaskNamePrefix + versionSuffix
  project.task(sparkValidatesRunnerTaskName) {
    pythonVersion = version
    dependsOn = [createProcessWorkerTaskName,
                 'setupVirtualenv',
                 ':runners:spark:job-server:shadowJar']
    doLast {
      def environment_config = "'{\"command\": \"${buildDir.absolutePath}/sdk_worker.sh\"}'"
      def argMap = [
          "environment_type"    : "PROCESS",
          "spark_job_server_jar": project(":runners:spark:job-server:").shadowJar.archivePath,
          "environment_config": environment_config,
          "environment_cache_millis": 10000,
      ]
      def argString = mapToArgString(argMap)

      // Optionally specify test function names separated by space e.g.:
      // ./gradlew :sdks:python:test-suites:portable:sparkValidatesRunner -Ptests="test_external_transforms test_read"
      // Otherwise run all test functions under SparkRunnerTest
      def tests = project.hasProperty('tests') ?
          project.property('tests').split().collect{ "SparkRunnerTest.$it" }.join(' ') : ''

      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test] && python -m apache_beam.runners.portability.spark_runner_test $tests $argString"
      }
    }
  }
}

task sparkValidatesRunner() {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(sparkValidatesRunnerTaskNamePrefix) }
  }
}

def chicagoTaxiExampleTaskNamePrefix = 'chicagoTaxiExamplePy'

getListProperty('portable_chicago_taxi_example_task_py_versions').each {
  def version = it
  def versionSuffix = getVersionSuffix(version)
  def installRequirementsTaskName = "installChicagoTaxiExampleRequirementsPy${versionSuffix}"
  project.task(installRequirementsTaskName) {
    pythonVersion = version
    dependsOn = ['installGcpTest']
    doLast {
      exec {
        workingDir "$rootProject.projectDir/sdks/python/apache_beam/testing/benchmarks/chicago_taxi/"
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && pip install -r requirements.txt"
      }
    }
  }
  def chicagoTaxiExampleTaskName = chicagoTaxiExampleTaskNamePrefix + versionSuffix
  project.task(chicagoTaxiExampleTaskName) {
    pythonVersion = version
    dependsOn = [installRequirementsTaskName]

    def gcsRoot = findProperty('gcsRoot')
    def pipelineOptions = findProperty('pipelineOptions') ?: ""

    doLast {
      exec {
        workingDir "$rootProject.projectDir/sdks/python/apache_beam/testing/benchmarks/chicago_taxi/"
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ./run_chicago.sh ${gcsRoot} PortableRunner ${pipelineOptions}"
      }
    }
  }
}

task chicagoTaxiExample {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(chicagoTaxiExampleTaskNamePrefix) }
  }
}
