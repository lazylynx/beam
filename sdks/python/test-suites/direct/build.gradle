/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyPythonNature()

// configure hdfs integration test tasks
def hdfsIntegrationTestTaskNamePrefix = 'hdfsIntegrationTestPy'

getTaskRunningPythonVersions('hdfs_integration_test_task_py_versions').each {
  def pythonVersionSuffix = it == '2.7' ? '2' : it
  def taskName = hdfsIntegrationTestTaskNamePrefix + pythonVersionSuffix.replace('.', '')
  project.task(taskName) {
    doLast {
      project.exec {
        executable 'sh'
        args '-c', "${rootDir}/sdks/python/apache_beam/io/hdfs_integration_test/hdfs_integration_test.sh python:${pythonVersionSuffix}"
      }
    }
  }
}

task hdfsIntegrationTest {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(hdfsIntegrationTestTaskNamePrefix) }
  }
}

// configure mongodbioIT tasks
def mongodbioITTaskNamePrefix = 'mongodbioITPy'

getTaskRunningPythonVersions('direct_mongodbio_it_task_py_versions').each {
  def mongodbioPythonVersion = it
  def taskName = mongodbioITTaskNamePrefix + mongodbioPythonVersion.replace('.', '')
  project.task(taskName) {
    pythonVersion = mongodbioPythonVersion
    dependsOn = ['setupVirtualenv']
    Random r = new Random()
    def port = r.nextInt(1000) + 27017
    def containerName = "mongoioit" + port

    def options = [
      "--mongo_uri=mongodb://localhost:" + port
    ]

    // Pull the latest mongodb docker image and run
    doFirst {
      exec {
        executable 'sh'
        args '-c', "docker pull mongo && docker run --name ${containerName} -p ${port}:27017 -d mongo:latest"
      }
    }

    doLast {
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && pip install -e ${rootDir}/sdks/python/[test] && python -m apache_beam.io.mongodbio_it_test ${options.join(' ')}"
      }
      exec {
        executable 'sh'
        args '-c', "docker stop ${containerName} && docker rm ${containerName}"
      }
    }
  }
}

task mongodbioIT {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(mongodbioITTaskNamePrefix) }
  }
}

// configure directRunnerIT tasks
def runScriptsDir = "${rootDir}/sdks/python/scripts"

// Basic test options for ITs running on Jenkins.
def basicTestOpts = [
    "--nocapture",  // print stdout instantly
    "--processes=8",  // run tests in parallel
    "--process-timeout=4500", // timeout of whole command execution
]

def directRunnerITTaskNamePrefix = 'directRunnerITPy'

getTaskRunningPythonVersions('direct_runner_it_task_py_versions').each {
  def directRunnerPythonVersion = it
  def taskName = directRunnerITTaskNamePrefix + directRunnerPythonVersion.replace('.', '')

  project.task(taskName) {
    pythonVersion = directRunnerPythonVersion
    dependsOn = ['installGcpTest']
    // Run IT tests with TestDirectRunner in batch.
    doLast {
      def tests = [
        "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
        "apache_beam.io.gcp.pubsub_integration_test:PubSubIntegrationTest",
        "apache_beam.io.gcp.big_query_query_to_table_it_test:BigQueryQueryToTableIT",
        "apache_beam.io.gcp.bigquery_io_read_it_test",
        "apache_beam.io.gcp.bigquery_read_it_test",
        "apache_beam.io.gcp.bigquery_write_it_test",
        "apache_beam.io.gcp.datastore.v1new.datastore_write_it_test",
      ]
      def batchTestOpts = basicTestOpts + ["--tests=${tests.join(',')}"]
      def argMap = ["runner": "TestDirectRunner",
                    "test_opts": batchTestOpts,
                    "suite": "directRunnerIT-batch"]
      def batchCmdArgs = mapToArgString(argMap)
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $batchCmdArgs"
      }
    }

    // Run IT tests with TestDirectRunner in streaming.
    doLast {
      def tests = [
          "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
          "apache_beam.io.gcp.pubsub_integration_test:PubSubIntegrationTest",
          "apache_beam.io.gcp.bigquery_test:BigQueryStreamingInsertTransformIntegrationTests.test_multiple_destinations_transform",
          "apache_beam.io.gcp.bigquery_test:PubSubBigQueryIT",
          "apache_beam.io.gcp.bigquery_file_loads_test:BigQueryFileLoadsIT.test_bqfl_streaming",
      ]
      def streamingTestOpts = basicTestOpts + ["--tests=${tests.join(',')}"]
      def argMap = ["runner": "TestDirectRunner",
                    "streaming": "true",
                    "test_opts": streamingTestOpts,
                    "suite": "directRunnerIT-streaming"]
      def streamingCmdArgs = mapToArgString(argMap)
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $streamingCmdArgs"
      }
    }
  }
}

task directRunnerIT {
  dependsOn {
    tasks.findAll { task -> task.name.startsWith(directRunnerITTaskNamePrefix) }
  }
}
